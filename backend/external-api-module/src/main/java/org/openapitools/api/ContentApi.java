/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ContentV1BarcodesPost200Response;
import org.openapitools.model.ContentV1BarcodesPostRequest;
import org.openapitools.model.ContentV1CardsCursorListPost200Response;
import org.openapitools.model.ContentV1CardsCursorListPostRequest;
import org.openapitools.model.ContentV1CardsErrorListGet200Response;
import org.openapitools.model.ContentV1CardsFilterPost200Response;
import org.openapitools.model.ContentV1CardsFilterPostRequest;
import org.openapitools.model.ContentV1CardsLimitsGet200Response;
import org.openapitools.model.ContentV1CardsMoveNmPost400Response;
import org.openapitools.model.ContentV1CardsMoveNmPostRequest;
import org.openapitools.model.ContentV1CardsTrashListPost200Response;
import org.openapitools.model.ContentV1CardsTrashListPostRequest;
import org.openapitools.model.ContentV1CardsUpdatePost200Response;
import org.openapitools.model.ContentV1CardsUpdatePostRequestInner;
import org.openapitools.model.ContentV1CardsUploadAddPostRequest;
import org.openapitools.model.ContentV1DirectoryColorsGet200Response;
import org.openapitools.model.ContentV1DirectoryCountriesGet200Response;
import org.openapitools.model.ContentV1DirectoryKindsGet200Response;
import org.openapitools.model.ContentV1DirectorySeasonsGet200Response;
import org.openapitools.model.ContentV1DirectoryTnvedGet200Response;
import org.openapitools.model.ContentV1MediaSavePostRequest;
import org.openapitools.model.ContentV1ObjectAllGet200Response;
import org.openapitools.model.ContentV1ObjectCharacteristicsListFilterGet200Response;
import org.openapitools.model.ContentV1ObjectCharacteristicsObjectNameGet200Response;
import org.openapitools.model.ContentV1ObjectParentAllGet200Response;
import org.openapitools.model.ContentV1TagIdDelete200Response;
import org.openapitools.model.ContentV1TagIdDelete200Response1;
import org.openapitools.model.ContentV1TagIdDelete400Response;
import org.openapitools.model.ContentV1TagIdDelete400Response1;
import org.openapitools.model.ContentV1TagIdDeleteRequest;
import org.openapitools.model.ContentV1TagNomenclatureLinkPostRequest;
import org.openapitools.model.ContentV1TagPost400Response;
import org.openapitools.model.ContentV1TagPostRequest;
import org.openapitools.model.ContentV1TagsGet200Response;
import org.openapitools.model.CreatingCardInnerInner;
import java.util.List;
import org.openapitools.model.ResponseBodyContentError400;
import org.openapitools.model.ResponseBodyContentError403;
import org.openapitools.model.ResponseCardCreate;
import org.openapitools.model.ResponseContentError4;
import org.openapitools.model.ResponseContentError6;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-14T20:34:42.239477400+03:00[Europe/Moscow]")
@Validated
@Tag(name = "content", description = "Создание и редактирование КТ")
@RequestMapping("${openapi.aPI.base-path:}")
public interface ContentApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /content/v1/barcodes : Генерация баркодов
     * Метод позволяет сгенерировать массив уникальных баркодов для создания размера НМ в КТ.
     *
     * @param contentV1BarcodesPostRequest  (required)
     * @return  (status code 200)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1BarcodesPost",
        summary = "Генерация баркодов",
        tags = { "Загрузка" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1BarcodesPost200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/content/v1/barcodes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ContentV1BarcodesPost200Response> contentV1BarcodesPost(
        @Parameter(name = "ContentV1BarcodesPostRequest", description = "", required = true) @Valid @RequestBody ContentV1BarcodesPostRequest contentV1BarcodesPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : [ \"5032781145187\", \"5032781145187\" ], \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /content/v1/cards/cursor/list : Список НМ
     * Метод позволяет получить список созданых НМ по фильтру (баркод, артикул продавца, артикул WB (nmId), тег) с пагинацией и сортировкой. &lt;br&gt; &lt;br&gt; &#x60;Важно!&#x60; Карточки, находящиеся в корзине, в ответе метода не выдаются. &lt;br&gt; Получить такие карточки можно только методом \&quot;Список НМ, находящихся в корзине\&quot;.&lt;br&gt; &lt;br&gt;Порядок работы с &#x60;cursor/list&#x60;: &lt;br&gt; Чтобы получить полный список номенклатур, &lt;b&gt;если их &gt; 1000&lt;/b&gt;, необходимо воспользоваться пагинацией.   &lt;ol&gt;     &lt;li&gt;Cделать первый запрос (все указанные ниже параметры обязательны): &lt;br&gt;       &lt;pre style&#x3D;\&quot;background-color: rgb(38 50 56 / 5%); color: #e53935\&quot;&gt;         {           \&quot;sort\&quot;: {               \&quot;cursor\&quot;: {                   \&quot;limit\&quot;: 1000               },               \&quot;filter\&quot;: {                   \&quot;withPhoto\&quot;: -1               }           }         }&lt;/pre&gt;       По желанию можно добавить поиск по &lt;code&gt;\&quot;textSearch\&quot;&lt;/code&gt; и сортировку.       &lt;pre style&#x3D;\&quot;background-color: rgb(38 50 56 / 5%); color: #e53935\&quot;&gt;         \&quot;sort\&quot;: {           \&quot;sortColumn\&quot;: \&quot;\&quot;,           \&quot;ascending\&quot;: false         }&lt;/pre&gt;     &lt;/li&gt;     &lt;li&gt;Пройти в конец полученного списка номенклатур, скопировать из &lt;code&gt;cursor&lt;/code&gt; две строки:       &lt;ul&gt;         &lt;li&gt;&lt;code&gt;\&quot;updatedAt\&quot;: \&quot;***\&quot;&lt;/code&gt;,&lt;/li&gt;         &lt;li&gt;&lt;code&gt;\&quot;nmID\&quot;: ***&lt;/code&gt;,&lt;/li&gt;       &lt;/ul&gt;     &lt;li&gt;Вставить скопированные строки в &lt;code&gt;cursor&lt;/code&gt; запроса, повторить вызов метода. &lt;/li&gt;     &lt;li&gt;Повторять пункты &lt;b&gt;2&lt;/b&gt; и &lt;b&gt;3&lt;/b&gt;, пока &lt;code&gt;total&lt;/code&gt; в ответе не станет меньше чем &lt;code&gt;limit&lt;/code&gt; в запросе.       &lt;br&gt;Это будет означать, что Вы получили все карточки.   &lt;/ol&gt; 
     *
     * @param contentV1CardsCursorListPostRequest  (required)
     * @return  (status code 200)
     *         or Не авторизован (status code 401)
     */
    @Operation(
        operationId = "contentV1CardsCursorListPost",
        summary = "Список НМ",
        tags = { "Просмотр" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1CardsCursorListPost200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/content/v1/cards/cursor/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ContentV1CardsCursorListPost200Response> contentV1CardsCursorListPost(
        @Parameter(name = "ContentV1CardsCursorListPostRequest", description = "", required = true) @Valid @RequestBody ContentV1CardsCursorListPostRequest contentV1CardsCursorListPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : { \"cursor\" : { \"total\" : 1, \"nmID\" : 66964167, \"updatedAt\" : \"2022-08-10T10:16:52Z\" }, \"cards\" : [ { \"imtID\" : 12313123, \"sizes\" : [ { \"skus\" : [ \"5032781142964\", \"5032781142964\" ], \"techSize\" : \"0\", \"chrtID\" : 116108635 }, { \"skus\" : [ \"5032781142964\", \"5032781142964\" ], \"techSize\" : \"0\", \"chrtID\" : 116108635 } ], \"mediaFiles\" : [ \"http://imglink.com/imgOne.jpg\", \"http://imglink.com/imgOne.jpg\" ], \"updateAt\" : \"2022-08-10T10:16:52Z\", \"nmID\" : 66964167, \"isProhibited\" : false, \"brand\" : \"Шанель\", \"colors\" : [ \"белый\", \"белый\" ], \"objectID\" : 96, \"vendorCode\" : \"670000001\", \"object\" : \"Туалетная вода\", \"tags\" : [ \"[]\", \"[]\" ] }, { \"imtID\" : 12313123, \"sizes\" : [ { \"skus\" : [ \"5032781142964\", \"5032781142964\" ], \"techSize\" : \"0\", \"chrtID\" : 116108635 }, { \"skus\" : [ \"5032781142964\", \"5032781142964\" ], \"techSize\" : \"0\", \"chrtID\" : 116108635 } ], \"mediaFiles\" : [ \"http://imglink.com/imgOne.jpg\", \"http://imglink.com/imgOne.jpg\" ], \"updateAt\" : \"2022-08-10T10:16:52Z\", \"nmID\" : 66964167, \"isProhibited\" : false, \"brand\" : \"Шанель\", \"colors\" : [ \"белый\", \"белый\" ], \"objectID\" : 96, \"vendorCode\" : \"670000001\", \"object\" : \"Туалетная вода\", \"tags\" : [ \"[]\", \"[]\" ] } ] }, \"additionalErrors\" : \"additionalErrors\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /content/v1/cards/error/list : Список несозданных НМ с ошибками
     * Метод позволяет получить список НМ и список ошибок которые произошли во время создания КТ. &lt;br&gt;&#x60;ВАЖНО&#x60;: Для того чтобы убрать НМ из ошибочных, надо повторно сделать запрос с исправленными ошибками на создание КТ. 
     *
     * @return  (status code 200)
     *         or Неверная форма запроса. (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен. (status code 403)
     */
    @Operation(
        operationId = "contentV1CardsErrorListGet",
        summary = "Список несозданных НМ с ошибками",
        tags = { "Просмотр" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1CardsErrorListGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/content/v1/cards/error/list",
        produces = { "application/json" }
    )
    default ResponseEntity<ContentV1CardsErrorListGet200Response> contentV1CardsErrorListGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : [ { \"updateAt\" : \"2022-06-15T14:37:13Z\", \"errors\" : [ \"Поля Рос. размер, Размер обязательны для заполнения\", \"Поля Рос. размер, Размер обязательны для заполнения\" ], \"objectID\" : 41, \"object\" : \"Блузки\", \"vendorCode\" : \"6000000001\" }, { \"updateAt\" : \"2022-06-15T14:37:13Z\", \"errors\" : [ \"Поля Рос. размер, Размер обязательны для заполнения\", \"Поля Рос. размер, Размер обязательны для заполнения\" ], \"objectID\" : 41, \"object\" : \"Блузки\", \"vendorCode\" : \"6000000001\" } ], \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /content/v1/cards/filter : Получение КТ по артикулам продавца
     * Метод позволяет получить полную информацию по КТ с помощью артикула(-ов) продавца. &lt;br&gt; &#x60;Важно!&#x60; Карточки, находящиеся в корзине, в ответе метода не выдаются. &lt;br&gt; Получить такие карточки можно только методом \&quot;Список НМ, находящихся в корзине\&quot;.&lt;br&gt;  Поиск работает только по полному совпадению значений. Получить точные значения для поиска можно методом \&quot;Список НМ\&quot;. 
     *
     * @param contentV1CardsFilterPostRequest  (required)
     * @return  (status code 200)
     *         or Неверная форма запроса. (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен. (status code 403)
     */
    @Operation(
        operationId = "contentV1CardsFilterPost",
        summary = "Получение КТ по артикулам продавца",
        tags = { "Просмотр" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1CardsFilterPost200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/content/v1/cards/filter",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ContentV1CardsFilterPost200Response> contentV1CardsFilterPost(
        @Parameter(name = "ContentV1CardsFilterPostRequest", description = "", required = true) @Valid @RequestBody ContentV1CardsFilterPostRequest contentV1CardsFilterPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : [ { \"imtID\" : 0, \"characteristics\" : [ \"{}\", \"{}\" ], \"sizes\" : [ { \"wbSize\" : \"wbSize\", \"skus\" : [ \"skus\", \"skus\" ], \"price\" : 9, \"techSize\" : \"techSize\", \"chrtID\" : 3 }, { \"wbSize\" : \"wbSize\", \"skus\" : [ \"skus\", \"skus\" ], \"price\" : 9, \"techSize\" : \"techSize\", \"chrtID\" : 3 } ], \"nmID\" : 1, \"mediaFiles\" : [ \"mediaFiles\", \"mediaFiles\" ], \"isProhibited\" : true, \"objectID\" : 6, \"object\" : \"object\", \"vendorCode\" : \"vendorCode\", \"tags\" : [ { \"color\" : \"color\", \"name\" : \"name\", \"id\" : 5 }, { \"color\" : \"color\", \"name\" : \"name\", \"id\" : 5 } ], \"dimensions\" : { \"width\" : 5, \"length\" : 2, \"height\" : 7 } }, { \"imtID\" : 0, \"characteristics\" : [ \"{}\", \"{}\" ], \"sizes\" : [ { \"wbSize\" : \"wbSize\", \"skus\" : [ \"skus\", \"skus\" ], \"price\" : 9, \"techSize\" : \"techSize\", \"chrtID\" : 3 }, { \"wbSize\" : \"wbSize\", \"skus\" : [ \"skus\", \"skus\" ], \"price\" : 9, \"techSize\" : \"techSize\", \"chrtID\" : 3 } ], \"nmID\" : 1, \"mediaFiles\" : [ \"mediaFiles\", \"mediaFiles\" ], \"isProhibited\" : true, \"objectID\" : 6, \"object\" : \"object\", \"vendorCode\" : \"vendorCode\", \"tags\" : [ { \"color\" : \"color\", \"name\" : \"name\", \"id\" : 5 }, { \"color\" : \"color\", \"name\" : \"name\", \"id\" : 5 } ], \"dimensions\" : { \"width\" : 5, \"length\" : 2, \"height\" : 7 } } ], \"additionalErrors\" : \"additionalErrors\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /content/v1/cards/limits : Лимиты по КТ
     * Метод позволяет получить отдельно бесплатные и платные лимиты продавца на создание карточек товаров. &lt;br&gt; Формула для получения количества карточек, которые можно создать: (&#x60;freeLimits&#x60; + &#x60;paidLimits&#x60;) - Количество созданных карточек.&lt;br&gt; Созданными считаются все карточки, которые можно получить методами \&quot;Список НМ\&quot; и \&quot;Список НМ, находящихся в корзине\&quot;. 
     *
     * @return  (status code 200)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1CardsLimitsGet",
        summary = "Лимиты по КТ",
        tags = { "Просмотр" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1CardsLimitsGet200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/content/v1/cards/limits",
        produces = { "application/json" }
    )
    default ResponseEntity<ContentV1CardsLimitsGet200Response> contentV1CardsLimitsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"errorText\", \"data\" : { \"paidLimits\" : 6, \"freeLimits\" : 0 }, \"additionalErrors\" : \"additionalErrors\", \"error\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /content/v1/cards/moveNm : Объединение / Разъединение НМ
     * Метод позволяет объединять номенклатуры (&#x60;nmID&#x60;) под одним &#x60;imtID&#x60; и разъединять их.&lt;br&gt; Для объединения НМ необходимо отправить запрос со списком НМ с заполненным параметром &#x60;targetIMT&#x60; в теле запроса.  При этом все НМ объединятся под &#x60;imtID&#x60; указанном в &#x60;targetIMT&#x60;. &lt;br&gt; &lt;br&gt; Чтобы отсоединить НМ от карточки, необходимо передать эту НМ без параметра &#x60;targetIMT&#x60; в теле запроса.&lt;br&gt; При этом для передаваемой НМ создается новый &#x60;imtID&#x60;. &lt;br&gt; Если в запросе на &lt;b&gt;разъединение&lt;/b&gt; передается несколько НМ, то все они автоматически &lt;b&gt;объединятся&lt;/b&gt; под &lt;b&gt;одним&lt;/b&gt; новым &#x60;imtID&#x60;. &lt;br&gt; Чтобы присвоить каждой НМ уникальный &#x60;imtID&#x60; необходимо передавать по одной НМ за запрос. Для НМ, не участвующих в запросе, никаких изменений не происходит.&lt;br&gt; &lt;br&gt; &#x60;ВАЖНО:&#x60; Объединить можно только номенклатуры с одинаковыми предметами.&lt;br&gt; &#x60;ВАЖНО:&#x60; В одной КТ (под одним &#x60;imtID&#x60;) не может быть больше 30 номенклатур (&#x60;nmID&#x60;). 
     *
     * @param contentV1CardsMoveNmPostRequest  (optional)
     * @return Успех (status code 200)
     *         or Некорретный формат запроса (status code 400)
     *         or Доступ запрещен (status code 403)
     *         or Внутренняя ошибка сервера (status code 500)
     */
    @Operation(
        operationId = "contentV1CardsMoveNmPost",
        summary = "Объединение / Разъединение НМ",
        tags = { "Загрузка" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Успех", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseCardCreate.class))
            }),
            @ApiResponse(responseCode = "400", description = "Некорретный формат запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1CardsMoveNmPost400Response.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseCardCreate.class))
            }),
            @ApiResponse(responseCode = "500", description = "Внутренняя ошибка сервера", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseCardCreate.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/content/v1/cards/moveNm",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseCardCreate> contentV1CardsMoveNmPost(
        @Parameter(name = "ContentV1CardsMoveNmPostRequest", description = "") @Valid @RequestBody(required = false) ContentV1CardsMoveNmPostRequest contentV1CardsMoveNmPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"errorText\", \"data\" : \"{}\", \"error\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /content/v1/cards/trash/list : Список НМ, находящихся в корзине
     * Метод позволяет получить список НМ, находящихся в корзине.&lt;br&gt; Метод позволяет получить список НМ, которые находятся в корзине по фильтру (баркод (&lt;code&gt;skus&lt;/code&gt;), артикул продавца(&lt;code&gt;vendorCode&lt;/code&gt;), артикул WB(&lt;code&gt;nmID&lt;/code&gt;)) с пагинацией и сортировкой. 
     *
     * @param contentV1CardsTrashListPostRequest  (required)
     * @return  (status code 200)
     *         or Неверная форма запроса. (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен. (status code 403)
     */
    @Operation(
        operationId = "contentV1CardsTrashListPost",
        summary = "Список НМ, находящихся в корзине",
        tags = { "Корзина" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1CardsTrashListPost200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/content/v1/cards/trash/list",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ContentV1CardsTrashListPost200Response> contentV1CardsTrashListPost(
        @Parameter(name = "ContentV1CardsTrashListPostRequest", description = "", required = true) @Valid @RequestBody ContentV1CardsTrashListPostRequest contentV1CardsTrashListPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"errorText\", \"data\" : { \"cursor\" : { \"offset\" : 5, \"limit\" : 5 }, \"cards\" : [ { \"sizes\" : [ { \"wbSize\" : \"wbSize\", \"skus\" : [ \"skus\", \"skus\" ], \"price\" : 1, \"techSize\" : \"techSize\" }, { \"wbSize\" : \"wbSize\", \"skus\" : [ \"skus\", \"skus\" ], \"price\" : 1, \"techSize\" : \"techSize\" } ], \"nmID\" : 0, \"updateAt\" : \"updateAt\", \"mediaFiles\" : [ \"mediaFiles\", \"mediaFiles\" ], \"brand\" : \"brand\", \"objectID\" : 6, \"colors\" : [ \"colors\", \"colors\" ], \"vendorCode\" : \"vendorCode\", \"object\" : \"object\" }, { \"sizes\" : [ { \"wbSize\" : \"wbSize\", \"skus\" : [ \"skus\", \"skus\" ], \"price\" : 1, \"techSize\" : \"techSize\" }, { \"wbSize\" : \"wbSize\", \"skus\" : [ \"skus\", \"skus\" ], \"price\" : 1, \"techSize\" : \"techSize\" } ], \"nmID\" : 0, \"updateAt\" : \"updateAt\", \"mediaFiles\" : [ \"mediaFiles\", \"mediaFiles\" ], \"brand\" : \"brand\", \"objectID\" : 6, \"colors\" : [ \"colors\", \"colors\" ], \"vendorCode\" : \"vendorCode\", \"object\" : \"object\" } ] }, \"additionalErrors\" : \"additionalErrors\", \"error\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /content/v1/cards/update : Редактирование КТ
     * Метод позволяет отредактировать несколько карточек за раз. &lt;br&gt; Редактирование КТ происходит асинхронно, после отправки запрос становится в очередь на обработку. &lt;br&gt; &#x60;Важно&#x60;: Баркоды (skus) не подлежат удалению или замене. Попытка заменить существующий баркод приведет к добавлению нового баркода к существующему. &lt;br&gt; Если запрос прошел успешно, а информация в карточке не обновилась, значит были допущены ошибки и карточка попала в \&quot;Черновики\&quot; (метод &#x60;cards/error/list&#x60;) с описанием ошибок. &lt;br&gt;Необходимо исправить ошибки в запросе и отправить его повторно. &lt;br&gt; &lt;br&gt; Для успешного обновления карточки рекомендуем Вам придерживаться следующего порядка действий: &lt;br&gt; 1. Сначала существующую карточку необходимо запросить методом cards/filter. &lt;br&gt; 2. Забираем из ответа массив data. &lt;br&gt; 3. В этом массиве вносим необходимые изменения и отправляем его в cards/update &lt;br&gt; &lt;br&gt;За раз можно отредактировать 1000 КТ по 5 НМ в каждой. &lt;br&gt; &lt;br&gt; &#x60;Важно!&#x60;  &lt;br&gt; Изменение цен данным методом невозможно, используйте метод &lt;b&gt;\&quot;Загрузка цен\&quot;&lt;/b&gt;, раздел документации &lt;b&gt;\&quot;Цены\&quot;&lt;/b&gt;. &lt;br&gt; &lt;br&gt; Редактирование медиафайлов данным методом не предусмотрено.  &lt;br&gt; Массив &#x60;mediaFiles&#x60; передавать в запросе не обязательно. 
     *
     * @param contentV1CardsUpdatePostRequestInner  (required)
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1CardsUpdatePost",
        summary = "Редактирование КТ",
        tags = { "Загрузка" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1CardsUpdatePost200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/content/v1/cards/update",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ContentV1CardsUpdatePost200Response> contentV1CardsUpdatePost(
        @Parameter(name = "ContentV1CardsUpdatePostRequestInner", description = "", required = true) @Valid @RequestBody List<ContentV1CardsUpdatePostRequestInner> contentV1CardsUpdatePostRequestInner
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : \"{}\", \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /content/v1/cards/upload/add : Добавление НМ к КТ
     * Метод позволяет добавить к карточке товара новую номенклатуру. &lt;br&gt;Добавление НМ к КТ происходит асинхронно, после отправки запрос становится в очередь на обработку. &lt;br&gt;&#x60;Важно&#x60;: Если после успешной отправки запроса номенклатура не создалась, то необходимо проверить раздел \&quot;Список несозданных НМ с ошибками\&quot;. Для того чтобы убрать НМ из ошибочных, необходимо повторно сделать запрос с исправленными ошибками. 
     *
     * @param contentV1CardsUploadAddPostRequest  (required)
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1CardsUploadAddPost",
        summary = "Добавление НМ к КТ",
        tags = { "Загрузка" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1CardsUpdatePost200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/content/v1/cards/upload/add",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ContentV1CardsUpdatePost200Response> contentV1CardsUploadAddPost(
        @Parameter(name = "ContentV1CardsUploadAddPostRequest", description = "", required = true) @Valid @RequestBody ContentV1CardsUploadAddPostRequest contentV1CardsUploadAddPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : \"{}\", \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /content/v1/cards/upload : Создание  КТ
     * Создание карточки товара происходит асинхронно, при отправке запроса на создание КТ ваш запрос становится в очередь на создание КТ. &lt;br&gt;&#x60;ПРИМЕЧАНИЕ&#x60;: Карточка товара считается &#x60;созданной&#x60;, если успешно создалась хотя бы одна &#x60;НМ&#x60;. &lt;br&gt;&#x60;ВАЖНО&#x60;: Если во время обработки запроса в очереди выявляются ошибки, то НМ считается ошибочной. &lt;br&gt;Если запрос на создание прошел успешно, а карточка не создалась, то необходимо в первую очередь проверить наличие карточки в методе &#x60;cards/error/list&#x60;. Если карточка попала в ответ к этому методу, то необходимо исправить описанные ошибки в запросе на создание карточки и отправить его повторно. &lt;br&gt;За раз можно создать 1000 КТ по 5 НМ в каждой.  &lt;br&gt;Если Вам требуется больше 5 НМ в КТ, то после создания карточки Вы можете добавить их методом \&quot;Добавление НМ к КТ\&quot;. 
     *
     * @param creatingCardInnerInner  (required)
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1CardsUploadPost",
        summary = "Создание  КТ",
        tags = { "Загрузка" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1CardsUpdatePost200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/content/v1/cards/upload",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ContentV1CardsUpdatePost200Response> contentV1CardsUploadPost(
        @Parameter(name = "CreatingCardInnerInner", description = "", required = true) @Valid @RequestBody List<List<CreatingCardInnerInner>> creatingCardInnerInner
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : \"{}\", \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /content/v1/directory/colors : Цвет
     * Получение значения характеристики цвет.
     *
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1DirectoryColorsGet",
        summary = "Цвет",
        tags = { "Конфигуратор" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1DirectoryColorsGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/content/v1/directory/colors",
        produces = { "application/json" }
    )
    default ResponseEntity<ContentV1DirectoryColorsGet200Response> contentV1DirectoryColorsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : [ { \"parentName\" : \"оранжевый\", \"name\" : \"персиковый крайола\" }, { \"parentName\" : \"оранжевый\", \"name\" : \"персиковый крайола\" } ], \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /content/v1/directory/countries : Страна Производства
     * Получение значения характеристики Страна Производства.
     *
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1DirectoryCountriesGet",
        summary = "Страна Производства",
        tags = { "Конфигуратор" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1DirectoryCountriesGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/content/v1/directory/countries",
        produces = { "application/json" }
    )
    default ResponseEntity<ContentV1DirectoryCountriesGet200Response> contentV1DirectoryCountriesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : [ { \"name\" : \"Афганистан\", \"fullName\" : \"Исламский Эмират Афганистан\" }, { \"name\" : \"Афганистан\", \"fullName\" : \"Исламский Эмират Афганистан\" } ], \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /content/v1/directory/kinds : Пол
     * Получение значения характеристики пол.
     *
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1DirectoryKindsGet",
        summary = "Пол",
        tags = { "Конфигуратор" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1DirectoryKindsGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/content/v1/directory/kinds",
        produces = { "application/json" }
    )
    default ResponseEntity<ContentV1DirectoryKindsGet200Response> contentV1DirectoryKindsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : [ \"Мужской\", \"Мужской\" ], \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /content/v1/directory/seasons : Сезон
     * Получение значения характеристики Сезон.
     *
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1DirectorySeasonsGet",
        summary = "Сезон",
        tags = { "Конфигуратор" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1DirectorySeasonsGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/content/v1/directory/seasons",
        produces = { "application/json" }
    )
    default ResponseEntity<ContentV1DirectorySeasonsGet200Response> contentV1DirectorySeasonsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : [ \"демисезон\", \"демисезон\" ], \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /content/v1/directory/tnved : ТНВЭД код
     * С помощью данного метода можно получить список ТНВЭД кодов по имени категории и фильтру по тнвэд коду.
     *
     * @param objectName Поиск по наименованию категории (optional)
     * @param tnvedsLike Поиск по коду ТНВЭД. &lt;b&gt;Параметр работает только в паре с параметром objectName.&lt;/b&gt; (optional)
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1DirectoryTnvedGet",
        summary = "ТНВЭД код",
        tags = { "Конфигуратор" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1DirectoryTnvedGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/content/v1/directory/tnved",
        produces = { "application/json" }
    )
    default ResponseEntity<ContentV1DirectoryTnvedGet200Response> contentV1DirectoryTnvedGet(
        @Parameter(name = "objectName", description = "Поиск по наименованию категории") @Valid @RequestParam(value = "objectName", required = false) String objectName,
        @Parameter(name = "tnvedsLike", description = "Поиск по коду ТНВЭД. <b>Параметр работает только в паре с параметром objectName.</b>") @Valid @RequestParam(value = "tnvedsLike", required = false) String tnvedsLike
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : [ { \"tnvedName\" : \"4203100001\", \"description\" : \"Предметы одежды из натуральной кожи\", \"subjectName\" : \"Блузки\", \"isKiz\" : true }, { \"tnvedName\" : \"4203100001\", \"description\" : \"Предметы одежды из натуральной кожи\", \"subjectName\" : \"Блузки\", \"isKiz\" : true } ], \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /content/v1/media/file : Добавление медиа контента в КТ
     * Метод позволяет загрузить и добавить один медиафайл за запрос, к НМ в КТ. &lt;br&gt;Требования к медиафайлам: &lt;br&gt;&#x60;Фото&#x60;: минимальное разрешение – 700x900. &lt;br&gt;Максимально допустимое количество фото в КТ 30. &lt;br&gt;Допустимые форматы изображений - jpg и png. &lt;br&gt;Минимальный уровень качества изображения - 65%.   &lt;br&gt;&#x60;Видео&#x60;: максимальный размер 50 мб. Форматы MOV, MP4. &lt;br&gt;Максимально допустимое количество видео в КТ 1. 
     *
     * @param xVendorCode Артикул продавца (required)
     * @param xPhotoNumber Номер медиафайла на загрузку. &lt;b&gt;Начинать с 1&lt;/b&gt;.&lt;br&gt;При загрузке видео всегда указывать значение 1. &lt;br&gt;Чтобы добавить фото к уже загруженным в НМ, номер медиафайла должен быть больше кол-ва загруженных в НМ медиафайлов.  (required)
     * @param uploadfile  (optional)
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     */
    @Operation(
        operationId = "contentV1MediaFilePost",
        summary = "Добавление медиа контента в КТ",
        tags = { "Медиафайлы" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1CardsUpdatePost200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/content/v1/media/file",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<ContentV1CardsUpdatePost200Response> contentV1MediaFilePost(
        @NotNull @Parameter(name = "X-Vendor-Code", description = "Артикул продавца", required = true) @RequestHeader(value = "X-Vendor-Code", required = true) String xVendorCode,
        @NotNull @Parameter(name = "X-Photo-Number", description = "Номер медиафайла на загрузку. <b>Начинать с 1</b>.<br>При загрузке видео всегда указывать значение 1. <br>Чтобы добавить фото к уже загруженным в НМ, номер медиафайла должен быть больше кол-ва загруженных в НМ медиафайлов. ", required = true) @RequestHeader(value = "X-Photo-Number", required = true) Integer xPhotoNumber,
        @Parameter(name = "uploadfile", description = "") @RequestPart(value = "uploadfile", required = false) MultipartFile uploadfile
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : \"{}\", \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /content/v1/media/save : Изменение медиа контента КТ
     * Метод позволяет изменить порядок изображений или удалить медиафайлы с НМ в КТ, а также загрузить изображения в НМ со сторонних ресурсов по URL. &lt;br&gt;Текущие изображения заменяются на переданные в массиве data. &lt;br&gt; &lt;br&gt;Требования к медиафайлам: &lt;br&gt;&#x60;Фото&#x60;: минимальное разрешение – 700x900. &lt;br&gt;Максимально допустимое количество фото в КТ 30.  &lt;br&gt;Допустимые форматы изображений - jpg и png. &lt;br&gt;Минимальный уровень качества изображения - 65%.  &lt;br&gt; &lt;br&gt;Если хотя бы одно изображение в запросе не соответствует требованиям к медиафайлам, то даже при коде ответа 200 ни одно изображение не загрузится в КТ.&lt;br&gt;  &lt;br&gt;&#x60;ВАЖНО!&#x60; Всё, что передаётся в массиве &#x60;data&#x60; полностью заменяет собой содержимое массива &#x60;mediaFiles&#x60; в КТ. &lt;br&gt;Если Вы добавляете фото к уже имеющимся в КТ, то вместе с новыми передайте в запросе все ссылки на фото и видео, которые уже содержатся в КТ. В противном случае в карточке окажутся только передаваемые фото. 
     *
     * @param contentV1MediaSavePostRequest  (required)
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     */
    @Operation(
        operationId = "contentV1MediaSavePost",
        summary = "Изменение медиа контента КТ",
        tags = { "Медиафайлы" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1CardsUpdatePost200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/content/v1/media/save",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ContentV1CardsUpdatePost200Response> contentV1MediaSavePost(
        @Parameter(name = "ContentV1MediaSavePostRequest", description = "", required = true) @Valid @RequestBody ContentV1MediaSavePostRequest contentV1MediaSavePostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : \"{}\", \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /content/v1/object/all : Категория товаров
     * С помощью данного метода можно получить список категорий товаров по текстовому фильтру (названию категории). &lt;br&gt; &lt;br&gt; Чтобы получить список всех категорий необходимо указать &#x60;top&#x3D;8000&#x60;, к примеру. &lt;br&gt; &lt;br&gt; По состоянию на &#x60;27.03.2023&#x60; в списке &#x60;7440&#x60; категорий. Количество доступных категорий может меняться.       
     *
     * @param name Поиск по названию категории (optional)
     * @param top Количество запрашиваемых значений (optional)
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1ObjectAllGet",
        summary = "Категория товаров",
        tags = { "Конфигуратор" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1ObjectAllGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/content/v1/object/all",
        produces = { "application/json" }
    )
    default ResponseEntity<ContentV1ObjectAllGet200Response> contentV1ObjectAllGet(
        @Parameter(name = "name", description = "Поиск по названию категории") @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "top", description = "Количество запрашиваемых значений") @Valid @RequestParam(value = "top", required = false) Integer top
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : [ { \"parentName\" : \"Электроника\", \"objectName\" : \"3D очки\", \"isVisible\" : true, \"objectID\" : 2560, \"parentID\" : 479 }, { \"parentName\" : \"Электроника\", \"objectName\" : \"3D очки\", \"isVisible\" : true, \"objectID\" : 2560, \"parentID\" : 479 } ], \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /content/v1/object/characteristics/list/filter : Характеристики для создания КТ по всем подкатегориям
     * С помощью данного метода можно получить список характеристик, которые можно или нужно заполнить при создании КТ в подкатегории определенной родительской категории.   &lt;br&gt;   &lt;br&gt;Характеристики с  &#x60;charcType&#x3D;4&#x60;, имеющие единственное значение, &lt;b&gt;указывать строго без массива&lt;/b&gt;, в противном случае карточка не будет создана:   &lt;br&gt;&lt;b&gt;Правильно:&lt;/b&gt;       &lt;br&gt;&#x60;{\&quot;Высота упаковки\&quot;: 4}&#x60;   &lt;br&gt;&lt;b&gt;Не правильно:&lt;/b&gt;       &lt;br&gt;&#x60;{\&quot;Высота упаковки\&quot;: [4]}&#x60; 
     *
     * @param name Поиск по родительской категории. (optional)
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1ObjectCharacteristicsListFilterGet",
        summary = "Характеристики для создания КТ по всем подкатегориям",
        tags = { "Конфигуратор" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1ObjectCharacteristicsListFilterGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/content/v1/object/characteristics/list/filter",
        produces = { "application/json" }
    )
    default ResponseEntity<ContentV1ObjectCharacteristicsListFilterGet200Response> contentV1ObjectCharacteristicsListFilterGet(
        @Parameter(name = "name", description = "Поиск по родительской категории.") @Valid @RequestParam(value = "name", required = false) String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : [ { \"unitName\" : \"\", \"charcType\" : 1, \"name\" : \"Особенности модели\", \"objectName\" : \"Косухи\", \"maxCount\" : 1, \"popular\" : false, \"required\" : false }, { \"unitName\" : \"\", \"charcType\" : 1, \"name\" : \"Особенности модели\", \"objectName\" : \"Косухи\", \"maxCount\" : 1, \"popular\" : false, \"required\" : false } ], \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /content/v1/object/characteristics/{objectName} : Характеристики для создания КТ для категории товара
     * С помощью данного метода можно получить список характеристик, которые можно или нужно заполнить при создании КТ для определенной категории товаров. &lt;br&gt; &lt;br&gt; &#x60;Важно&#x60;: обязательная к заполнению характеристика при создании карточки любого товара - &#x60;Предмет&#x60;. &lt;br&gt;Значение характеристики &#x60;Предмет&#x60; соответствует значению параметра &#x60;objectName&#x60; в запросе. &lt;br&gt; &lt;br&gt;Характеристики с  &#x60;charcType&#x3D;4&#x60;, имеющие единственное значение, &lt;b&gt;указывать строго без массива&lt;/b&gt;, в противном случае карточка не будет создана: &lt;br&gt;&lt;b&gt;Правильно:&lt;/b&gt;     &lt;br&gt;&#x60;{\&quot;Высота упаковки\&quot;: 4}&#x60; &lt;br&gt;&lt;b&gt;Не правильно:&lt;/b&gt;     &lt;br&gt;&#x60;{\&quot;Высота упаковки\&quot;: [4]}&#x60; 
     *
     * @param objectName Поиск по наименованию категории (required)
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1ObjectCharacteristicsObjectNameGet",
        summary = "Характеристики для создания КТ для категории товара",
        tags = { "Конфигуратор" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1ObjectCharacteristicsObjectNameGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/content/v1/object/characteristics/{objectName}",
        produces = { "application/json" }
    )
    default ResponseEntity<ContentV1ObjectCharacteristicsObjectNameGet200Response> contentV1ObjectCharacteristicsObjectNameGet(
        @Parameter(name = "objectName", description = "Поиск по наименованию категории", required = true) @PathVariable("objectName") String objectName
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : [ { \"unitName\" : \"см\", \"charcType\" : 4, \"name\" : \"Глубина упаковки\", \"objectName\" : \"Носки\", \"maxCount\" : 0, \"popular\" : false, \"required\" : false }, { \"unitName\" : \"см\", \"charcType\" : 4, \"name\" : \"Глубина упаковки\", \"objectName\" : \"Носки\", \"maxCount\" : 0, \"popular\" : false, \"required\" : false } ], \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /content/v1/object/parent/all : Родительские категории товаров
     * С помощью данного метода можно получить список всех родительских категорий товаров.
     *
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1ObjectParentAllGet",
        summary = "Родительские категории товаров",
        tags = { "Конфигуратор" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1ObjectParentAllGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError400.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/content/v1/object/parent/all",
        produces = { "application/json" }
    )
    default ResponseEntity<ContentV1ObjectParentAllGet200Response> contentV1ObjectParentAllGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : [ { \"name\" : \"Электроника\", \"id\" : 479, \"isVisible\" : true }, { \"name\" : \"Электроника\", \"id\" : 479, \"isVisible\" : true } ], \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /content/v1/tag/{id} : Удаление тега
     * Метод позволяет удалить тег.
     *
     * @param id Числовой идентификатор тега (required)
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1TagIdDelete",
        summary = "Удаление тега",
        tags = { "Теги" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1TagIdDelete200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1TagIdDelete400Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/content/v1/tag/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<ContentV1TagIdDelete200Response> contentV1TagIdDelete(
        @Parameter(name = "id", description = "Числовой идентификатор тега", required = true) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /content/v1/tag/{id} : Изменение тега
     * Метод позволяет изменять информацию о теге (имя и цвет).
     *
     * @param id Числовой идентификатор тега (required)
     * @param contentV1TagIdDeleteRequest  (required)
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1TagIdPatch",
        summary = "Изменение тега",
        tags = { "Теги" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1TagIdDelete200Response1.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1TagIdDelete400Response1.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/content/v1/tag/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ContentV1TagIdDelete200Response1> contentV1TagIdPatch(
        @Parameter(name = "id", description = "Числовой идентификатор тега", required = true) @PathVariable("id") Integer id,
        @Parameter(name = "ContentV1TagIdDeleteRequest", description = "", required = true) @Valid @RequestBody ContentV1TagIdDeleteRequest contentV1TagIdDeleteRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /content/v1/tag/nomenclature/link : Управление тегами в КТ
     * Метод позволяет добавить теги к КТ и снять их с КТ.&lt;br&gt; При снятии тега с КТ сам тег не удаляется.&lt;br&gt; К карточке можно добавить 8 тегов. 
     *
     * @param contentV1TagNomenclatureLinkPostRequest  (required)
     * @return  (status code 200)
     *         or  (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     *         or  (status code 500)
     */
    @Operation(
        operationId = "contentV1TagNomenclatureLinkPost",
        summary = "Управление тегами в КТ",
        tags = { "Теги" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContentError6.class))
            }),
            @ApiResponse(responseCode = "400", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContentError4.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            }),
            @ApiResponse(responseCode = "500", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContentError6.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/content/v1/tag/nomenclature/link",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseContentError6> contentV1TagNomenclatureLinkPost(
        @Parameter(name = "ContentV1TagNomenclatureLinkPostRequest", description = "", required = true) @Valid @RequestBody ContentV1TagNomenclatureLinkPostRequest contentV1TagNomenclatureLinkPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : null, \"error\" : false, \"errorText\" : \"\", \"additionalErrors\" : null }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /content/v1/tag : Создание тега
     * Метод позволяет создать тег.&lt;br&gt; Завести можно 8 тегов.&lt;br&gt; Максимальная длина тега 15 символов. 
     *
     * @param contentV1TagPostRequest  (required)
     * @return  (status code 200)
     *         or Неверная форма запроса (status code 400)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1TagPost",
        summary = "Создание тега",
        tags = { "Теги" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseContentError6.class))
            }),
            @ApiResponse(responseCode = "400", description = "Неверная форма запроса", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1TagPost400Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/content/v1/tag",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseContentError6> contentV1TagPost(
        @Parameter(name = "ContentV1TagPostRequest", description = "", required = true) @Valid @RequestBody ContentV1TagPostRequest contentV1TagPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : null, \"error\" : false, \"errorText\" : \"\", \"additionalErrors\" : null }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /content/v1/tags : Список тегов
     * Метод позволяет получить список существующих тегов продавца.
     *
     * @return  (status code 200)
     *         or Не авторизован (status code 401)
     *         or Доступ запрещен (status code 403)
     */
    @Operation(
        operationId = "contentV1TagsGet",
        summary = "Список тегов",
        tags = { "Теги" },
        responses = {
            @ApiResponse(responseCode = "200", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContentV1TagsGet200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Не авторизован", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseBodyContentError403.class))
            })
        },
        security = {
            @SecurityRequirement(name = "HeaderApiKey")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/content/v1/tags",
        produces = { "application/json" }
    )
    default ResponseEntity<ContentV1TagsGet200Response> contentV1TagsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errorText\" : \"\", \"data\" : { \"color\" : \"color\", \"name\" : \"name\", \"id\" : 0 }, \"additionalErrors\" : \"\", \"error\" : false }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
